/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//Defining the package for the program
package Coursework_Package;

//Importing all the required packages 
import java.awt.Desktop;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.io.IOException;

/**
 *
 * @author ASUS
 */
public class Airlines_Info extends javax.swing.JFrame {

    /**
     * Creates new form Airlines_Info
     */
    public Airlines_Info() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classButtonGroup = new javax.swing.ButtonGroup();
        routeButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        mainTitleLabel = new javax.swing.JLabel();
        passengerInfoPanel = new javax.swing.JPanel();
        passengerCodeLabel = new javax.swing.JLabel();
        passengerCodeTextField = new javax.swing.JTextField();
        passengerCodeWarningLabel = new javax.swing.JLabel();
        passengerNameWarningLabel = new javax.swing.JLabel();
        passengerNameTextField = new javax.swing.JTextField();
        passengerNameLabel = new javax.swing.JLabel();
        destinationLabel = new javax.swing.JLabel();
        destinationWarningLabel = new javax.swing.JLabel();
        destinationComboBox = new javax.swing.JComboBox<>();
        airlineComboBox = new javax.swing.JComboBox<>();
        airlineWarningLabel = new javax.swing.JLabel();
        airlineLabel = new javax.swing.JLabel();
        classLabel = new javax.swing.JLabel();
        classWarningLabel = new javax.swing.JLabel();
        classFirstRadioButton = new javax.swing.JRadioButton();
        routeWarningLabel = new javax.swing.JLabel();
        routeLabel = new javax.swing.JLabel();
        routeOneCheckBox = new javax.swing.JCheckBox();
        routeTwoCheckBox = new javax.swing.JCheckBox();
        priceTextField = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        priceWarningLabel = new javax.swing.JLabel();
        classBusinessRadioButton = new javax.swing.JRadioButton();
        classEconomicRadioButton = new javax.swing.JRadioButton();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        airlinesiInfoPanel = new javax.swing.JPanel();
        informationScrollPanel = new javax.swing.JScrollPane();
        informationTable = new javax.swing.JTable();
        categorySearchPanel = new javax.swing.JPanel();
        categoryLabel = new javax.swing.JLabel();
        categoryDestinationWarningLabel = new javax.swing.JLabel();
        destinationSearchButton = new javax.swing.JButton();
        destinationSearchComboBox = new javax.swing.JComboBox<>();
        airlineSearchComboBox = new javax.swing.JComboBox<>();
        categoryAirlineWarningLabel = new javax.swing.JLabel();
        airlineSearchButton = new javax.swing.JButton();
        priceSearchPanel = new javax.swing.JPanel();
        priceSearchLabel = new javax.swing.JLabel();
        priceSearchTextField = new javax.swing.JTextField();
        priceSearchButton = new javax.swing.JButton();
        priceSearchWarningLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        guideMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(204, 204, 255));
        mainPanel.setForeground(new java.awt.Color(255, 255, 255));

        mainTitleLabel.setBackground(new java.awt.Color(153, 153, 153));
        mainTitleLabel.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        mainTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitleLabel.setText("AFFINITY AIRLINES");

        passengerInfoPanel.setBackground(new java.awt.Color(204, 204, 255));
        passengerInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), " Passenger Info ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 24))); // NOI18N

        passengerCodeLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        passengerCodeLabel.setText("Passenger Code");

        passengerCodeTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        passengerCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passengerCodeTextFieldKeyTyped(evt);
            }
        });

        passengerCodeWarningLabel.setBackground(new java.awt.Color(204, 0, 0));
        passengerCodeWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        passengerCodeWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        passengerNameWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        passengerNameWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        passengerNameTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        passengerNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passengerNameTextFieldKeyTyped(evt);
            }
        });

        passengerNameLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        passengerNameLabel.setText("Passenger Name");

        destinationLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        destinationLabel.setText("Destination");

        destinationWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        destinationWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        destinationComboBox.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        destinationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose a Destination", "Sweden", "Finland", "Denmark", "Norway", "Iceland" }));
        destinationComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                destinationComboBoxMouseClicked(evt);
            }
        });

        airlineComboBox.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        airlineComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose an Airline", "Scandanavian Airlines", "Norwegian Air Shuttle", "Atlantic Airways", "Finnair Airways" }));
        airlineComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                airlineComboBoxMouseClicked(evt);
            }
        });

        airlineWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        airlineWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        airlineLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        airlineLabel.setText("Airlines");

        classLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        classLabel.setText("Class");

        classWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        classWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        classButtonGroup.add(classFirstRadioButton);
        classFirstRadioButton.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        classFirstRadioButton.setText("First Class");
        classFirstRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classFirstRadioButtonMouseClicked(evt);
            }
        });

        routeWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        routeWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        routeLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        routeLabel.setText("Route");

        routeButtonGroup.add(routeOneCheckBox);
        routeOneCheckBox.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        routeOneCheckBox.setText("One Way");
        routeOneCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                routeOneCheckBoxMouseClicked(evt);
            }
        });

        routeButtonGroup.add(routeTwoCheckBox);
        routeTwoCheckBox.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        routeTwoCheckBox.setText("Two Way");
        routeTwoCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                routeTwoCheckBoxMouseClicked(evt);
            }
        });

        priceTextField.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        priceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceTextFieldKeyTyped(evt);
            }
        });

        priceLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceLabel.setText("Price");

        priceWarningLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        classButtonGroup.add(classBusinessRadioButton);
        classBusinessRadioButton.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        classBusinessRadioButton.setText("Business Class");
        classBusinessRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classBusinessRadioButtonMouseClicked(evt);
            }
        });

        classButtonGroup.add(classEconomicRadioButton);
        classEconomicRadioButton.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        classEconomicRadioButton.setText("Economic Class");
        classEconomicRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classEconomicRadioButtonMouseClicked(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        addButton.setText("Add to Table");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        clearButton.setText("Clear all Sections");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        updateButton.setText("Update ");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout passengerInfoPanelLayout = new javax.swing.GroupLayout(passengerInfoPanel);
        passengerInfoPanel.setLayout(passengerInfoPanelLayout);
        passengerInfoPanelLayout.setHorizontalGroup(
            passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passengerInfoPanelLayout.createSequentialGroup()
                        .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(passengerCodeWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passengerCodeLabel)
                                    .addComponent(passengerNameLabel)
                                    .addComponent(destinationLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(airlineComboBox, 0, 233, Short.MAX_VALUE)
                                        .addComponent(passengerCodeTextField)
                                        .addComponent(passengerNameWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(passengerNameTextField)
                                        .addComponent(destinationWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(destinationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(airlineWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(classEconomicRadioButton)
                                    .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(classWarningLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, passengerInfoPanelLayout.createSequentialGroup()
                                            .addComponent(classFirstRadioButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(classBusinessRadioButton))))))
                        .addGap(31, 31, 31))
                    .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                        .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                                .addGap(187, 187, 187)
                                .addComponent(routeWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, passengerInfoPanelLayout.createSequentialGroup()
                                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                                        .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(priceWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, passengerInfoPanelLayout.createSequentialGroup()
                                            .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(airlineLabel)
                                                .addComponent(classLabel)
                                                .addComponent(routeLabel)
                                                .addComponent(priceLabel))
                                            .addGap(128, 128, 128)
                                            .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                                                    .addComponent(routeOneCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(8, 8, 8)
                                                    .addComponent(routeTwoCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(11, 11, 11)))
                        .addContainerGap(20, Short.MAX_VALUE))))
        );
        passengerInfoPanelLayout.setVerticalGroup(
            passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passengerInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(passengerCodeWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passengerCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengerCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passengerNameWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passengerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passengerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(destinationWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destinationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(airlineWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(airlineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airlineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(classWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classFirstRadioButton)
                    .addComponent(classBusinessRadioButton)
                    .addComponent(classLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(classEconomicRadioButton)
                .addGap(9, 9, 9)
                .addComponent(routeWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(routeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(routeOneCheckBox)
                    .addComponent(routeTwoCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(priceWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(passengerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        airlinesiInfoPanel.setBackground(new java.awt.Color(204, 204, 255));
        airlinesiInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), " Airlines Info ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 24))); // NOI18N

        informationTable.setAutoCreateRowSorter(true);
        informationTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        informationTable.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        informationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1001", "Notail", "Denmark", "Scandanavian Airlines", "Business Class", "One Way", "100"},
                {"1002", "Sumail", "Norway", "Norwegian Air Shuttle", "Economic Class", "One Way", "125"},
                {"1003", "Sebastian", "Finland", "Finnair Airways", "First Class", "Two Way", "300"},
                {"1004", "Topson", "Finland", "Norwegian Air Shuttle", "First Class", "Two Way", "250"},
                {"1005", "Insania", "Denmark", "Finnair Airways", "Economic Class", "One Way", "150"},
                {"1010", "Mickie", "Iceland", "Norwegian Air Shuttle", "Business Class", "One Way", "205"},
                {"1012", "Zai", "Denmark", "Scandanavian Airlines", "Business Class", "One Way", "175"},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Passenger Code", "Passenger Name", "Destination", "Airlines", "Class", "Route", "Price (in Euros)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        informationTable.setShowGrid(true);
        informationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                informationTableMouseClicked(evt);
            }
        });
        informationScrollPanel.setViewportView(informationTable);

        javax.swing.GroupLayout airlinesiInfoPanelLayout = new javax.swing.GroupLayout(airlinesiInfoPanel);
        airlinesiInfoPanel.setLayout(airlinesiInfoPanelLayout);
        airlinesiInfoPanelLayout.setHorizontalGroup(
            airlinesiInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(airlinesiInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
                .addContainerGap())
        );
        airlinesiInfoPanelLayout.setVerticalGroup(
            airlinesiInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(airlinesiInfoPanelLayout.createSequentialGroup()
                .addComponent(informationScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        categorySearchPanel.setBackground(new java.awt.Color(204, 204, 255));
        categorySearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), " Category Search ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 24))); // NOI18N

        categoryLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        categoryLabel.setText("Enter the Destination and Airlines you want to search");

        categoryDestinationWarningLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        categoryDestinationWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        destinationSearchButton.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        destinationSearchButton.setText("Search by Destination");
        destinationSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationSearchButtonActionPerformed(evt);
            }
        });

        destinationSearchComboBox.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        destinationSearchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Destination List", "Sweden", "Finland", "Denmark", "Norway", "Iceland" }));
        destinationSearchComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                destinationSearchComboBoxMouseClicked(evt);
            }
        });

        airlineSearchComboBox.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        airlineSearchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Airline List", "Scandanavian Airlines", "Norwegian Air Shuttle", "Atlantic Airways", "Finnair Airways" }));
        airlineSearchComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                airlineSearchComboBoxMouseClicked(evt);
            }
        });

        categoryAirlineWarningLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        categoryAirlineWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        airlineSearchButton.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        airlineSearchButton.setText("Search by Airline");
        airlineSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airlineSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout categorySearchPanelLayout = new javax.swing.GroupLayout(categorySearchPanel);
        categorySearchPanel.setLayout(categorySearchPanelLayout);
        categorySearchPanelLayout.setHorizontalGroup(
            categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categorySearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(categorySearchPanelLayout.createSequentialGroup()
                        .addComponent(airlineSearchComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28)
                        .addComponent(airlineSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(categorySearchPanelLayout.createSequentialGroup()
                        .addGroup(categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryLabel)
                            .addComponent(categoryAirlineWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 35, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, categorySearchPanelLayout.createSequentialGroup()
                        .addGroup(categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(categoryDestinationWarningLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(destinationSearchComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addComponent(destinationSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        categorySearchPanelLayout.setVerticalGroup(
            categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categorySearchPanelLayout.createSequentialGroup()
                .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryDestinationWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destinationSearchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinationSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categoryAirlineWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(categorySearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(airlineSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(airlineSearchComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        priceSearchPanel.setBackground(new java.awt.Color(204, 204, 255));
        priceSearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true), " Price Search ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 24))); // NOI18N

        priceSearchLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceSearchLabel.setText("Enter the Price of the Ticket you want to search");

        priceSearchTextField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceSearchTextFieldKeyTyped(evt);
            }
        });

        priceSearchButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        priceSearchButton.setText("Search by Price");
        priceSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchButtonActionPerformed(evt);
            }
        });

        priceSearchWarningLabel.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        priceSearchWarningLabel.setForeground(new java.awt.Color(51, 0, 0));

        javax.swing.GroupLayout priceSearchPanelLayout = new javax.swing.GroupLayout(priceSearchPanel);
        priceSearchPanel.setLayout(priceSearchPanelLayout);
        priceSearchPanelLayout.setHorizontalGroup(
            priceSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priceSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(priceSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(priceSearchPanelLayout.createSequentialGroup()
                        .addComponent(priceSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(priceSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(priceSearchPanelLayout.createSequentialGroup()
                        .addComponent(priceSearchLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(priceSearchWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        priceSearchPanelLayout.setVerticalGroup(
            priceSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priceSearchPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(priceSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(priceSearchWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(priceSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(priceSearchPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(priceSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, priceSearchPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(priceSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(passengerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(airlinesiInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(priceSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(categorySearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(airlinesiInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(categorySearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(passengerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        mainMenuBar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        helpMenu.setText("Help");

        guideMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        guideMenuItem.setText("User Manual");
        guideMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guideMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(guideMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Defining a static method to implement Binary Search algoritm which accepts an arraylist storing all the elements of price column
    //Passing the respective array list, the low and high indices with the value to be searched
    public static int binarySearch(ArrayList<String> priceList, int low, int high, String priceValue) {
        //Implementation of the program only only when high index is greater than or equal to low
        if (low <= high) {
            //Determining the low index of the array list
            int mid = (low + high) / 2;
            //Return of mid index when an index matching the value is determined.
            if (priceList.get(mid).equals(priceValue)) {
                return mid;
                //Recursive method calling on either sides of the mid position
            } else if ((priceValue.compareTo(priceList.get(mid))) < 0) {
                return binarySearch(priceList, low, mid - 1, priceValue);
            } else {
                return binarySearch(priceList, mid + 1, high, priceValue);
            }
            // Return of a negative index for a value not found
        } else {
            return -1;
        }
    }

    //Defining a method to implement Selection Sort algorithm which accepts an Array List of all elements stored in the price column
    public ArrayList<String> selectionSort(ArrayList<String> listPrice) {
        //Iterating through every element of the array list from the beginining till the end
        for (int i = 0; i < listPrice.size(); i++) {
            //Initializing the minimum value at first index of the unsorted array list to be minimum value
            int minValue = Integer.parseInt(listPrice.get(i));
            int minIndex = i;
            //Iterating through every element of the unsorted array from the top to the end
            for (int j = i; j < listPrice.size(); j++) {
                int tempVal = Integer.parseInt(listPrice.get(j));
                //Examining the initialized minimum value with the remaining elements of the array list
                //If smaller values are found, the minimum value is changed and its index too
                if (tempVal < minValue) {
                    minValue = Integer.parseInt(listPrice.get(j));
                    minIndex = j;
                }
            }
            //Iterating the changed minimum value with the other elements of the unsorted array
            //If smaller values are detected, swapping of these elements are necessary
            if (minValue < Integer.parseInt(listPrice.get(i))) {
                String tempVar = listPrice.get(i);
                listPrice.set(i, listPrice.get(minIndex));
                listPrice.set(minIndex, tempVar);
            }
        }
        //Returning of an arraylist storing all the elements of the price column in an ascending order
        return listPrice;
    }

    //Defining a method to a text field so it accepts only digits, numbers, backspaces and delete
    private void passengerCodeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passengerCodeTextFieldKeyTyped
        // TODO add your handling code here:
        //Defining a character to accept the user inputs
        char c = evt.getKeyChar();
        //Examining if it contains any other value than digits, numbers, backspaces or delete function
        if (!((c >= '0') && (c <= '9') || (c == evt.VK_BACK_SPACE) || (c == evt.VK_DELETE))|| (c == evt.VK_SPACE)) {
            //Setting a warning label when it violates the above rule
            evt.consume();
            passengerCodeWarningLabel.setText("Invalid Number.");
        } else {
            passengerCodeWarningLabel.setText("");
        }
    }//GEN-LAST:event_passengerCodeTextFieldKeyTyped

    //Defining a method to a text field so it accepts only alphabetic characters, backspaces and delete
    private void passengerNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passengerNameTextFieldKeyTyped
        // TODO add your handling code here:
        //Defining a character to accept the user inputs
        char c = evt.getKeyChar();
        //Examining if it contains any other value than alphabetic characters, backspaces and delete function
        if (!((Character.isAlphabetic(c)) || (c == evt.VK_BACK_SPACE) || (c == evt.VK_DELETE))|| (c == evt.VK_SPACE)) {
            //Setting a warning label when it violates the above rule
            evt.consume();
            passengerNameWarningLabel.setText("Invalid Text.");
        } else {
            passengerNameWarningLabel.setText("");
        }
    }//GEN-LAST:event_passengerNameTextFieldKeyTyped

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void destinationComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_destinationComboBoxMouseClicked
        // TODO add your handling code here:
        destinationWarningLabel.setText("");
    }//GEN-LAST:event_destinationComboBoxMouseClicked

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void airlineComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airlineComboBoxMouseClicked
        // TODO add your handling code here:
        airlineWarningLabel.setText("");
    }//GEN-LAST:event_airlineComboBoxMouseClicked

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void classFirstRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classFirstRadioButtonMouseClicked
        // TODO add your handling code here:
        classWarningLabel.setText("");
    }//GEN-LAST:event_classFirstRadioButtonMouseClicked

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void classBusinessRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classBusinessRadioButtonMouseClicked
        // TODO add your handling code here:
        classWarningLabel.setText("");
    }//GEN-LAST:event_classBusinessRadioButtonMouseClicked

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void classEconomicRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classEconomicRadioButtonMouseClicked
        // TODO add your handling code here:
        classWarningLabel.setText("");
    }//GEN-LAST:event_classEconomicRadioButtonMouseClicked

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void routeOneCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_routeOneCheckBoxMouseClicked
        // TODO add your handling code here:
        routeWarningLabel.setText("");
    }//GEN-LAST:event_routeOneCheckBoxMouseClicked

    //Defining a method to clear any warning labels when mouse clicked event is performed
    private void routeTwoCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_routeTwoCheckBoxMouseClicked
        // TODO add your handling code here:
        routeWarningLabel.setText("");
    }//GEN-LAST:event_routeTwoCheckBoxMouseClicked

    //Defining a method to a text field so it accepts only digits, numbers, backspaces and delete
    private void priceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTextFieldKeyTyped
        // TODO add your handling code here:
        //Defining a character to accept the user inputs
        char c = evt.getKeyChar();
        //Examining if it contains any other value than digits, numbers, backspaces or delete function
        if (!((c >= '0') && (c <= '9') || (c == evt.VK_BACK_SPACE) || (c == evt.VK_DELETE))|| (c == evt.VK_SPACE)) {
            //Setting a warning label when it violates the above rule
            evt.consume();
            priceWarningLabel.setText("Invalid Number.");
        } else {
            priceWarningLabel.setText("");
        }
    }//GEN-LAST:event_priceTextFieldKeyTyped

    //Defining a method to add the details of user input into the table
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        //Storing of all the user inputs in their respective sting variables
        String passengerCode = passengerCodeTextField.getText().trim();
        String passengerName = passengerNameTextField.getText().trim();
        String destinationPlace = (String) destinationComboBox.getSelectedItem();
        String airlinesTravelled = (String) airlineComboBox.getSelectedItem();
        String classType = "";
        if (classFirstRadioButton.isSelected()) {
            classType = classFirstRadioButton.getText();
        } else if (classBusinessRadioButton.isSelected()) {
            classType = classBusinessRadioButton.getText();
        } else if (classEconomicRadioButton.isSelected()) {
            classType = classEconomicRadioButton.getText();
        }
        String routeType = "";
        if (routeOneCheckBox.isSelected()) {
            routeType = routeOneCheckBox.getText();
        } else if (routeTwoCheckBox.isSelected()) {
            routeType = routeTwoCheckBox.getText();
        }
        String priceAmount = priceTextField.getText().trim();
        //Storing of all the user inputs into an array of String data type
        String[] dataAirlines = {passengerCode, passengerName, destinationPlace, airlinesTravelled, classType, routeType, priceAmount};
        //Initializing variables to check for the next empty row
        int nextRow = 0;
        int rowCount = informationTable.getRowCount();
        int colCount = informationTable.getColumnCount();
        boolean rowEmpty = false;
        String value = "";
        try {
            //Examining for empty variables passed in the text fields or when a combobox, radio button or check box is not selected.
            if (!passengerCode.isEmpty()) {
                if (!passengerName.isEmpty()) {
                    if (destinationComboBox.getSelectedIndex() != 0) {
                        if (airlineComboBox.getSelectedIndex() != 0) {
                            if (!classType.isEmpty()) {
                                if (!routeType.isEmpty()) {
                                    if (!priceAmount.isEmpty()) {
                                        //Examining if the next row is empty or not
                                        do {
                                            value = (String) informationTable.getValueAt(nextRow, 0);
                                            if (value != null && value.length() != 0) {
                                                nextRow++;
                                            } else {
                                                rowEmpty = true;
                                            }
                                        } while (nextRow < rowCount && !rowEmpty);
                                        //Iterating every element of the array and storing it in the respective position of the table
                                        for (int i = 0; i < colCount; i++) {
                                            informationTable.setValueAt(dataAirlines[i], nextRow, i);
                                        }
                                        //Dialog box to present the required information while adding a data
                                        JOptionPane.showMessageDialog(rootPane, "Passenger Information Added. \nPassenger Code: " + passengerCode + "\nPassenger Name: "
                                                + passengerName + "\nDestination: " + destinationPlace + "\nAirlines: " + airlinesTravelled + "\nSeat Class: "
                                                + classType + "\nRoute Type: " + routeType + "\nPrice Paid: €" + priceAmount, "Successfully Added.", JOptionPane.INFORMATION_MESSAGE);
                                        passengerCodeTextField.setText("");
                                        passengerNameTextField.setText("");
                                        destinationComboBox.setSelectedIndex(0);
                                        airlineComboBox.setSelectedIndex(0);
                                        classButtonGroup.clearSelection();
                                        routeButtonGroup.clearSelection();
                                        priceTextField.setText("");
                                        passengerCodeWarningLabel.setText("");
                                        passengerNameWarningLabel.setText("");
                                        destinationWarningLabel.setText("");
                                        airlineWarningLabel.setText("");
                                        classWarningLabel.setText("");
                                        routeWarningLabel.setText("");
                                        priceWarningLabel.setText("");
                                    } else {
                                        passengerCodeWarningLabel.setText("");
                                        passengerNameWarningLabel.setText("");
                                        destinationWarningLabel.setText("");
                                        airlineWarningLabel.setText("");
                                        classWarningLabel.setText("");
                                        routeWarningLabel.setText("");
                                        priceWarningLabel.setText("*Required Field.");
                                        priceTextField.grabFocus();
                                    }
                                } else {
                                    passengerCodeWarningLabel.setText("");
                                    passengerNameWarningLabel.setText("");
                                    destinationWarningLabel.setText("");
                                    airlineWarningLabel.setText("");
                                    classWarningLabel.setText("");
                                    routeWarningLabel.setText("*Required Field");
                                    priceWarningLabel.setText("");
                                }
                            } else {
                                passengerCodeWarningLabel.setText("");
                                passengerNameWarningLabel.setText("");
                                destinationWarningLabel.setText("");
                                airlineWarningLabel.setText("");
                                classWarningLabel.setText("*Required Field.");
                                routeWarningLabel.setText("");
                                priceWarningLabel.setText("");
                            }
                        } else {
                            passengerCodeWarningLabel.setText("");
                            passengerNameWarningLabel.setText("");
                            destinationWarningLabel.setText("");
                            airlineWarningLabel.setText("*Required Field.");
                            airlineComboBox.grabFocus();
                            classWarningLabel.setText("");
                            routeWarningLabel.setText("");
                            priceWarningLabel.setText("");
                        }
                    } else {
                        passengerCodeWarningLabel.setText("");
                        passengerNameWarningLabel.setText("");
                        destinationWarningLabel.setText("*Required Field");
                        destinationComboBox.grabFocus();
                        airlineWarningLabel.setText("");
                        classWarningLabel.setText("");
                        routeWarningLabel.setText("");
                        priceWarningLabel.setText("");
                    }
                } else {
                    passengerCodeWarningLabel.setText("");
                    passengerNameWarningLabel.setText("*Required Field");
                    passengerNameTextField.grabFocus();
                    destinationWarningLabel.setText("");
                    airlineWarningLabel.setText("");
                    classWarningLabel.setText("");
                    routeWarningLabel.setText("");
                    priceWarningLabel.setText("");
                }
            } else {
                passengerCodeWarningLabel.setText("*Required Field.");
                passengerCodeTextField.grabFocus();
                passengerNameWarningLabel.setText("");
                destinationWarningLabel.setText("");
                airlineWarningLabel.setText("");
                classWarningLabel.setText("");
                routeWarningLabel.setText("");
                priceWarningLabel.setText("");
            }
        } catch (Exception e) {
            //Exception in case that all the data rows are filled so that a new row is to be modeled and added
            DefaultTableModel model = (DefaultTableModel) informationTable.getModel();
            model.addRow(dataAirlines);
            JOptionPane.showMessageDialog(rootPane, "Passenger Information Added. \nPassenger Code: " + passengerCode + "\nPassenger Name: "
                    + passengerName + "\nDestination: " + destinationPlace + "\nAirlines: " + airlinesTravelled + "\nSeat Class: "
                    + classType + "\nRoute Type: " + routeType + "\nPrice Paid: €" + priceAmount, "Successfully Added.", JOptionPane.INFORMATION_MESSAGE);
            passengerCodeTextField.setText("");
            passengerNameTextField.setText("");
            destinationComboBox.setSelectedIndex(0);
            airlineComboBox.setSelectedIndex(0);
            classButtonGroup.clearSelection();
            routeButtonGroup.clearSelection();
            priceTextField.setText("");
            passengerCodeWarningLabel.setText("");
            passengerNameWarningLabel.setText("");
            destinationWarningLabel.setText("");
            airlineWarningLabel.setText("");
            classWarningLabel.setText("");
            routeWarningLabel.setText("");
            priceWarningLabel.setText("");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    //Defining a method to clear all the text fields and set the index of the combo boxes to default, and clearing of selection of radio buttons and check boxes
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        passengerCodeTextField.setText("");
        passengerNameTextField.setText("");
        destinationComboBox.setSelectedIndex(0);
        airlineComboBox.setSelectedIndex(0);
        classButtonGroup.clearSelection();
        routeButtonGroup.clearSelection();
        priceTextField.setText("");
        passengerCodeWarningLabel.setText("");
        passengerNameWarningLabel.setText("");
        destinationWarningLabel.setText("");
        airlineWarningLabel.setText("");
        classWarningLabel.setText("");
        routeWarningLabel.setText("");
        priceWarningLabel.setText("");
        JOptionPane.showMessageDialog(rootPane, "All the user inputs have been cleared.", "Successfully Cleared.", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_clearButtonActionPerformed

    //Initializing the variables to calculate the initial position of an element before sorting and final position after sorting
    int initialIndex, finalIndex;

    //Defining a method to search the details of user inputted price
    private void priceSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchButtonActionPerformed
        // TODO add your handling code here:
        try {
            //Defining array lists for each columns to store all the respective details
            ArrayList<String> passengerCode = new ArrayList<>();
            ArrayList<String> passengerName = new ArrayList<>();
            ArrayList<String> passengerDestination = new ArrayList<>();
            ArrayList<String> passengerAirlines = new ArrayList<>();
            ArrayList<String> passengerClass = new ArrayList<>();
            ArrayList<String> passengerRoute = new ArrayList<>();
            ArrayList<String> passengerPrice = new ArrayList<>();
            //Defining the attributes to determine the next empty row
            int rowCount = informationTable.getRowCount();
            int colCount = informationTable.getColumnCount();
            int rowIndex = 0;
            boolean emptyRow = false;
            String priceValue = priceSearchTextField.getText().trim();
            //Display of an error warning label for an empty text field
            if (priceValue.isEmpty()) {
                priceSearchWarningLabel.setText("*Required Text.");
            } else {
                do {
                    //Storing of the details of every column in their respective string variables
                    String codePassenger = (String) informationTable.getValueAt(rowIndex, 0);
                    String namePassenger = (String) informationTable.getValueAt(rowIndex, 1);
                    String destinationPassenger = (String) informationTable.getValueAt(rowIndex, 2);
                    String airlinesPassenger = (String) informationTable.getValueAt(rowIndex, 3);
                    String classPassenger = (String) informationTable.getValueAt(rowIndex, 4);
                    String routePassenger = (String) informationTable.getValueAt(rowIndex, 5);
                    String pricePassenger = (String) informationTable.getValueAt(rowIndex, 6);
                    //Examining whether the value stored is null or not
                    if (pricePassenger != null && pricePassenger.length() != 0) {
                        //Addition of not null values inside the defined array list
                        passengerCode.add(codePassenger);
                        passengerName.add(namePassenger);
                        passengerDestination.add(destinationPassenger);
                        passengerAirlines.add(airlinesPassenger);
                        passengerClass.add(classPassenger);
                        passengerRoute.add(routePassenger);
                        passengerPrice.add(pricePassenger);
                        rowIndex++;
                    } else {
                        emptyRow = true;
                    }
                } while (rowIndex < rowCount && !emptyRow);
                //Iterating through every element of the array list storing the elements of price column
                for (int i = 0; i < passengerPrice.size(); i++) {
                    //Examinining if the user input matches with the any value of the arraylist
                    if (passengerPrice.get(i).equals(priceValue)) {
                        //Finalizing the initial index when the input matches with an element of an array list in a certain index
                        initialIndex = i;
                        //Calling of selection sort method defined above to sort the array list of price in an ascending order
                        selectionSort(passengerPrice);
                        break;
                    }
                }
                //Initializing the low and high indices of the array list
                int low = 0;
                int high = passengerPrice.size() - 1;
                //Defining the Binary Search method by passing the array list storing price, their respective indices and the index of the user input to be determined
                int searchResult = binarySearch(passengerPrice, low, high, priceValue);
                finalIndex = searchResult;
                //For values other than negative or for values which are stored in the given table
                if (finalIndex != -1) {
                    //Swapping of the other details from its initial position to a new position and displaying their respective details
                    JOptionPane.showMessageDialog(rootPane, "Passenger Found. \nPassenger Code: " + passengerCode.set(initialIndex, passengerCode.get(finalIndex))
                            + "\nPassenger Name: " + passengerName.set(initialIndex, passengerName.get(finalIndex)) + "\nDestination: " + passengerDestination.set(initialIndex, passengerDestination.get(finalIndex))
                            + "\nAirlines: " + passengerAirlines.set(initialIndex, passengerAirlines.get(finalIndex)) + "\nSeat Class: " + passengerClass.set(initialIndex, passengerClass.get(finalIndex))
                            + "\nRoute Type: " + passengerRoute.set(initialIndex, passengerRoute.get(finalIndex)) + "\nPrice Paid: €" + priceValue,
                            "Successfully Found.", JOptionPane.INFORMATION_MESSAGE);
                    priceSearchTextField.setText("");
                } else {
                    //Display of an error message when the user input doesn't match any values stored in the respective array list
                    JOptionPane.showMessageDialog(rootPane, "The price value of €" + priceValue + " has not been found.", "Unsuccessful.", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (IndexOutOfBoundsException e) {
            //Exception handling for a table with no any rows
            JOptionPane.showMessageDialog(rootPane, "Table has Empty Rows. \nYou can import values from the Open File Menu.", "Try Again.", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_priceSearchButtonActionPerformed

    //Defining a method for which the text fields accept only numbers, integers, and allows backspaces or delete function
    private void priceSearchTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceSearchTextFieldKeyTyped
        // TODO add your handling code here:
        //Examining the character typed by the user
        char c = evt.getKeyChar();
        //Examining if it contains any other value than digits, numbers, backspaces or delete function
        if (!((c >= '0') && (c <= '9') || (c == evt.VK_BACK_SPACE) || (c == evt.VK_DELETE))|| (c == evt.VK_SPACE)) {
            //Setting a warning label when it violates the above rule
            evt.consume();
            priceSearchWarningLabel.setText("Invalid Number.");
        } else {
            priceSearchWarningLabel.setText("");
        }
    }//GEN-LAST:event_priceSearchTextFieldKeyTyped

    //Removal of any warning label when either of the selection for the combobox is selected
    private void destinationSearchComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_destinationSearchComboBoxMouseClicked
        // TODO add your handling code here:
        categoryDestinationWarningLabel.setText("");
    }//GEN-LAST:event_destinationSearchComboBoxMouseClicked

    //Removal of any warning label when either of the selection for the combobox is selected
    private void airlineSearchComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_airlineSearchComboBoxMouseClicked
        // TODO add your handling code here:
        categoryAirlineWarningLabel.setText("");
    }//GEN-LAST:event_airlineSearchComboBoxMouseClicked

    //Defining a method to determine the search function to find out the number of passenger travelling to a certain destination
    private void destinationSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationSearchButtonActionPerformed
        // TODO add your handling code here:
        //When a valid value is selected other than the zero index
        if (destinationSearchComboBox.getSelectedIndex() != 0) {
            //Casting the object into string type as the item selected by the user
            String userChoice = destinationSearchComboBox.getSelectedItem().toString();
            //Initializing the count of the user choice 
            int count = 0;
            boolean flag_destination = false;
            //Defining array lists to store the details of all the destinations and the names of the passengers who travel through the user inputted destination
            ArrayList<String> destinationList = new ArrayList<>();
            ArrayList<String> nameList = new ArrayList<>();
            //Initializing parameters for examining the empty rows
            int rowCount = informationTable.getRowCount();
            int rowIndex = 0;
            boolean emptyRow = false;
            if (destinationSearchComboBox.getSelectedIndex() == 0) {
                destinationWarningLabel.setText("*Required Text.");
            } else {
                do {
                    //Procedures to find out the next empty row or the final index till which values are stored in the table
                    String example = (String) informationTable.getValueAt(rowIndex, 0);
                    if (example != null && example.length() != 0) {
                        rowIndex++;
                    } else {
                        emptyRow = true;
                    }
                } while (rowIndex < rowCount && !emptyRow);
                //Iterating through every element filled with data
                for (int i = 0; i < rowIndex; i++) {
                    //Storing of all the destinations from its respective column into their array list
                    String userDestination = (String) informationTable.getValueAt(i, 2);
                    destinationList.add(userDestination);
                }
                //Iterating through every element of the array list storing the destination
                for (int i = 0; i < destinationList.size(); i++) {
                    //Examining whether the user input matches with list of destinations
                    if (userChoice.equals(destinationList.get(i))) {
                        //When a match is found, their respective names are recorded and stored in an array list increasing the count
                        String namePassenger = informationTable.getValueAt(i, 1).toString();
                        nameList.add(namePassenger);
                        count++;
                        flag_destination = true;
                        rowIndex++;
                    }
                }
                //For the values recorded in the data store
                if (count > 0) {
                    JOptionPane.showMessageDialog(null, "Number of People travelling to " + userChoice + ": " + count, "Successfully Found.", JOptionPane.INFORMATION_MESSAGE);
                }
                if (flag_destination == true) {
                    String found = "";
                    for (String data : nameList) {
                        found += data + "\n";
                    }
                    JOptionPane.showMessageDialog(null, "Passenger Travelling : \n" + found, "Successfully Found.", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    //For values not found in the data store
                    JOptionPane.showMessageDialog(null, "Destination not found.", "Not Found.", JOptionPane.ERROR_MESSAGE);

                }
                destinationSearchComboBox.setSelectedIndex(0);
            }
        } else {
            categoryDestinationWarningLabel.setText("*Required Field.");
        }
    }//GEN-LAST:event_destinationSearchButtonActionPerformed

    //Defining a method to determine the search function to find out the number of passenger travelling from a particular airline
    private void airlineSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airlineSearchButtonActionPerformed
        // TODO add your handling code here:
        //When a valid value is selected other than the zero index
        if (airlineSearchComboBox.getSelectedIndex() != 0) {
            //Casting the object into string type as the item selected by the user
            String userChoice = airlineSearchComboBox.getSelectedItem().toString();
            //Initializing the count of the user choice 
            int count = 0;
            boolean flag_destination = false;
            //Defining array lists to store the details of all the airlines and the names of the passengers who travel through the user inputted destination
            ArrayList<String> airlineList = new ArrayList<>();
            ArrayList<String> nameList = new ArrayList<>();
            //Initializing parameters for examining the empty rows
            int rowCount = informationTable.getRowCount();
            int rowIndex = 0;
            boolean emptyRow = false;

            do {
                //Procedures to find out the next empty row or the final index till which values are stored in the table
                String example = (String) informationTable.getValueAt(rowIndex, 0);
                if (example != null && example.length() != 0) {
                    rowIndex++;
                } else {
                    emptyRow = true;
                }
            } while (rowIndex < rowCount && !emptyRow);
            //Iterating through every element filled with data
            for (int i = 0; i < rowIndex; i++) {
                //Storing of all the destinations from its respective column into their array list
                String userDestination = (String) informationTable.getValueAt(i, 3);
                airlineList.add(userDestination);
            }
            //Iterating through every element of the array list storing the airlines
            for (int i = 0; i < airlineList.size(); i++) {
                //Examining whether the user input matches with list of airlines
                if (userChoice.equals(airlineList.get(i))) {
                    //When a match is found, their respective names are recorded and stored in an array list increasing the count
                    String namePassenger = informationTable.getValueAt(i, 1).toString();
                    nameList.add(namePassenger);
                    count++;
                    flag_destination = true;
                    rowIndex++;
                }
            }
            //For the values recorded in the data store
            if (count > 0) {
                JOptionPane.showMessageDialog(null, "Number of People travelling from " + userChoice + ": " + count, "Successfully Found.", JOptionPane.INFORMATION_MESSAGE);
            }
            if (flag_destination == true) {
                String found = "";
                for (String data : nameList) {
                    found += data + "\n";
                }
                JOptionPane.showMessageDialog(null, "Passenger Travelling : \n" + found, "Successfully Found.", JOptionPane.INFORMATION_MESSAGE);
            } else {
                //For values not found in the data store
                JOptionPane.showMessageDialog(null, "Airlines not found.", "Not Found.", JOptionPane.ERROR_MESSAGE);

            }
            airlineSearchComboBox.setSelectedIndex(0);

        } else {
            categoryAirlineWarningLabel.setText("*Required Field.");
        }
    }//GEN-LAST:event_airlineSearchButtonActionPerformed

    //Defining a method to set a new frame with cleared text fields, deselected button groups and indices set to 0 for each combobox
    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        passengerCodeTextField.setText("");
        passengerNameTextField.setText("");
        destinationComboBox.setSelectedIndex(0);
        airlineComboBox.setSelectedIndex(0);
        classButtonGroup.clearSelection();
        routeButtonGroup.clearSelection();
        priceTextField.setText("");
        passengerCodeWarningLabel.setText("");
        passengerNameWarningLabel.setText("");
        destinationWarningLabel.setText("");
        airlineWarningLabel.setText("");
        classWarningLabel.setText("");
        routeWarningLabel.setText("");
        priceWarningLabel.setText("");
        JOptionPane.showMessageDialog(rootPane, "A new system has been opened.", "New File Opened.", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_newMenuItemActionPerformed

    //Defining a method to import all the details of a text file into the data store table
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        //Defining the directory path where the text file is located.
        String path = System.getProperty("user.dir") + "/src/Coursework_Package/Import.txt";
        try {
            //Defining of a buffered reader to determine the file reader function
            BufferedReader br = new BufferedReader(new FileReader(path));
            //Determining the variables to examine the final row storing any data
            int nextRow = 7;
            boolean rowEmpty = false;
            String line = "";
            String example = "";
            //Checking for the lines of the text file and if it is not null, storing it in an array
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                do {
                    //Process to examine the final row storing elements which are not null
                    example = (String) informationTable.getValueAt(nextRow, 0);
                    if (example != null && example.length() != 0) {
                        nextRow++;
                    } else {
                        rowEmpty = true;
                    }
                } while (!rowEmpty);
                //Setting up all the data stored in the array to the required column and position of the data store
                for (int j = 0; j < data.length; j++) {
                    informationTable.setValueAt(data[j], nextRow, j);
                }
            }
            //Display of dialog box with suitable message to justify successful importing
            JOptionPane.showMessageDialog(rootPane, "File Successfully Imported.", "Successfully Imported.", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            //Defining an exception in case a file is not found
            Logger.getLogger(Airlines_Info.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            //Defining an exception in order to import and store all the details in the data store when all the rows are filled
            FileReader fr = null;
            try {
                fr = new FileReader(path);
                BufferedReader br = new BufferedReader(fr);
                Object[] lines = br.lines().toArray();
                DefaultTableModel model = (DefaultTableModel) informationTable.getModel();
                for (int i = 0; i < lines.length; i++) {
                    String[] row = lines[i].toString().split(",");
                    model.addRow(row);
                }
                JOptionPane.showMessageDialog(rootPane, "File Successfully Imported.", "Successfully Imported.", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Airlines_Info.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    fr.close();
                } catch (IOException ex) {
                    Logger.getLogger(Airlines_Info.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    //Defining a method to export all the details stored in the data store to a separate text file
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        //Defining the path on which the details needs to be stored
        String path = System.getProperty("user.dir") + "/src/Coursework_Package/Export.txt";
        File file = new File(path);
        try {
            //Defining a file writer function and buffered writer function to read and write the details
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            //Initializing the functions to determine the number of non empty rows
            int row = informationTable.getRowCount();
            int rowIndex = 0;
            boolean emptyRow = false;
            //Function to calculate the number of non empty rows
            do {
                String example = (String) informationTable.getValueAt(rowIndex, 2);
                if (example != null && example.length() != 0) {
                    rowIndex++;
                } else {
                    emptyRow = true;
                }
            } while (rowIndex < row && !emptyRow);
            //Iterating through every row of the table from zero index to the final index sotring data
            for (int i = 0; i < rowIndex; i++) {
                //Iterating every element of the particular row
                for (int j = 0; j < informationTable.getColumnCount(); j++) {
                    //Writing the details of the specified position separating every of them
                    bw.write(informationTable.getValueAt(i, j).toString());
                    bw.write(",");
                }
                bw.write("\n");
            }
            bw.close();
            fw.close();
            //Display of dialog box with suitable message to justify successful exporting
            JOptionPane.showMessageDialog(rootPane, "File Successfully Exported.", "Successfully Exported.", JOptionPane.INFORMATION_MESSAGE);

        } catch (NullPointerException e) {
            //Defining an exception when the file is not exported
            JOptionPane.showMessageDialog(rootPane, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Airlines_Info.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "File not Exported.", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    //Defining a method to exit the system project
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    //Defining a method to open the user manual from the menu
    private void guideMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guideMenuItemActionPerformed
        // TODO add your handling code here:
        //Defining the path where the user manual is located
        String path = System.getProperty("user.dir") + "/src/Coursework_Package/Manual.pdf";
        try {
            //Event handling to open up the manual pdf file thorugh desktop
            Desktop.getDesktop().open(new java.io.File(path));
        } catch (IllegalArgumentException e) {
            //Catching of an exception when a file is not found
            JOptionPane.showMessageDialog(rootPane, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Airlines_Info.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guideMenuItemActionPerformed

    //Defining a method to update the details of the user once a single row is selected
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        //Defining a table model to add rows in required case
        DefaultTableModel tableModel = (DefaultTableModel) informationTable.getModel();

        //When a single row is selected
        if (informationTable.getSelectedRowCount() == 1) {
            //Extracting all the values of the user inputs and storing it in a string variable
            String passengerCode = passengerCodeTextField.getText().trim();
            String passengerName = passengerNameTextField.getText().trim();
            String destinationPlace = (String) destinationComboBox.getSelectedItem();
            String airlinesTravelled = (String) airlineComboBox.getSelectedItem();
            String classType = "";
            if (classFirstRadioButton.isSelected()) {
                classType = classFirstRadioButton.getText();
            } else if (classBusinessRadioButton.isSelected()) {
                classType = classBusinessRadioButton.getText();
            } else if (classEconomicRadioButton.isSelected()) {
                classType = classEconomicRadioButton.getText();
            }
            String routeType = "";
            if (routeOneCheckBox.isSelected()) {
                routeType = routeOneCheckBox.getText();
            } else if (routeTwoCheckBox.isSelected()) {
                routeType = routeTwoCheckBox.getText();
            }
            String priceAmount = priceTextField.getText().trim();
            //Updating value or setting value of the particular column in the required position of selected row
            tableModel.setValueAt(passengerCode, informationTable.getSelectedRow(), 0);
            tableModel.setValueAt(passengerName, informationTable.getSelectedRow(), 1);
            tableModel.setValueAt(destinationPlace, informationTable.getSelectedRow(), 2);
            tableModel.setValueAt(airlinesTravelled, informationTable.getSelectedRow(), 3);
            tableModel.setValueAt(classType, informationTable.getSelectedRow(), 4);
            tableModel.setValueAt(routeType, informationTable.getSelectedRow(), 5);
            tableModel.setValueAt(priceAmount, informationTable.getSelectedRow(), 6);
            //Display of correct message once the updating is completed
            JOptionPane.showMessageDialog(rootPane, "Passenger Information Updated. \nPassenger Code: " + passengerCode + "\nPassenger Name: "
                    + passengerName + "\nDestination: " + destinationPlace + "\nAirlines: " + airlinesTravelled + "\nSeat Class: "
                    + classType + "\nRoute Type: " + routeType + "\nPrice Paid: €" + priceAmount, "Successfully Updated.", JOptionPane.INFORMATION_MESSAGE);
            passengerCodeTextField.setText("");
            passengerNameTextField.setText("");
            destinationComboBox.setSelectedIndex(0);
            airlineComboBox.setSelectedIndex(0);
            classButtonGroup.clearSelection();
            routeButtonGroup.clearSelection();
            priceTextField.setText("");

        } else {
            //Case scenario when the button update is clicked even when no any rows is seleced
            if (informationTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(rootPane, "Please select a row to which values are to be updated.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                //Case scenario when the button update is clicked for which multiple rows are selected
                JOptionPane.showMessageDialog(rootPane, "Please select a single row for updating the respective values.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    //Defining a method to delete the user details once a single row is selected
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        //Defining of a table Model to remove a particular row of selection
        DefaultTableModel tableModel = (DefaultTableModel) informationTable.getModel();
        //When a single row is selected by the user
        if (informationTable.getSelectedRowCount() == 1) {
            //Deletion of the particular selected row
            tableModel.removeRow(informationTable.getSelectedRow());
            //Display of suitable message once the row is successfully removed
            JOptionPane.showMessageDialog(rootPane, "Passenger Information Removed.", "Successfully Removed.", JOptionPane.INFORMATION_MESSAGE);
            passengerCodeTextField.setText("");
            passengerNameTextField.setText("");
            destinationComboBox.setSelectedIndex(0);
            airlineComboBox.setSelectedIndex(0);
            classButtonGroup.clearSelection();
            routeButtonGroup.clearSelection();
            priceTextField.setText("");
        } else {
            //Case scenario when the button update is clicked even when no any rows is seleced
            if (informationTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(rootPane, "Please select a row to which values are to be updated.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                //Case scenario when the button update is clicked for which multiple rows are selected
                JOptionPane.showMessageDialog(rootPane, "Please select a single row for updating the respective values.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    //Defining a method to extract the details of the selected or clicked row into the respective user inputs
    private void informationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_informationTableMouseClicked
        // TODO add your handling code here:
        //Examining the total number of non empty rows
        int rowCount = informationTable.getRowCount();
        int rowIndex = 0;
        boolean emptyRow = false;

        do {
            String example = (String) informationTable.getValueAt(rowIndex, 0);
            if (example != null && example.length() != 0) {
                rowIndex++;
            } else {
                emptyRow = true;
            }
        } while (rowIndex < rowCount && !emptyRow);
        //Case scenario such that the details of not null rows are selected
        if (informationTable.getSelectedRow() < rowIndex) {
            //Extracting of all elements stored in that particular row for their respective string variables
            String passengerCode = informationTable.getValueAt(informationTable.getSelectedRow(), 0).toString();
            String passengerName = informationTable.getValueAt(informationTable.getSelectedRow(), 1).toString();
            String destinationPlace = informationTable.getValueAt(informationTable.getSelectedRow(), 2).toString();
            String airlinesTravelled = informationTable.getValueAt(informationTable.getSelectedRow(), 3).toString();
            String classType = informationTable.getValueAt(informationTable.getSelectedRow(), 4).toString();
            String routeType = informationTable.getValueAt(informationTable.getSelectedRow(), 5).toString();
            String passengerPrice = informationTable.getValueAt(informationTable.getSelectedRow(), 6).toString();

            //Setting the value of text fields as per the selected row
            passengerCodeTextField.setText(passengerCode);
            passengerNameTextField.setText(passengerName);
            priceTextField.setText(passengerPrice);
            //Switching the index of combo box when a particular value is selected through the row
            switch (destinationPlace) {
                case "Sweden":
                    destinationComboBox.setSelectedIndex(1);
                    break;
                case "Finland":
                    destinationComboBox.setSelectedIndex(2);
                    break;
                case "Denmark":
                    destinationComboBox.setSelectedIndex(3);
                    break;
                case "Norway":
                    destinationComboBox.setSelectedIndex(4);
                    break;
                case "Iceland":
                    destinationComboBox.setSelectedIndex(5);
                    break;
                default:
                    break;
            }
            //Switching the index of combo box when a particular value is selected through the row
            switch (airlinesTravelled) {
                case "Scandanavian Airlines":
                    airlineComboBox.setSelectedIndex(1);
                    break;
                case "Norwegian Air Shuttle":
                    airlineComboBox.setSelectedIndex(2);
                    break;
                case "Atlantic Airways":
                    airlineComboBox.setSelectedIndex(3);
                    break;
                case "Finnair Airways":
                    airlineComboBox.setSelectedIndex(4);
                    break;
                default:
                    break;
            }
            //Switching the selection of radio buttons when a particular value is selected through the row
            switch (classType) {
                case "First Class":
                    classFirstRadioButton.setSelected(true);
                    break;
                case "Business Class":
                    classBusinessRadioButton.setSelected(true);
                    break;
                case "Economic Class":
                    classEconomicRadioButton.setSelected(true);
                    break;
                default:
                    break;
            }
            //Switching the selection of check boxes when a particular value is selected through the row
            switch (routeType) {
                case "One Way":
                    routeOneCheckBox.setSelected(true);
                    break;
                case "Two Way":
                    routeTwoCheckBox.setSelected(true);
                    break;
            }
        }
    }//GEN-LAST:event_informationTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Airlines_Info.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Airlines_Info.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Airlines_Info.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Airlines_Info.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Airlines_Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> airlineComboBox;
    private javax.swing.JLabel airlineLabel;
    private javax.swing.JButton airlineSearchButton;
    private javax.swing.JComboBox<String> airlineSearchComboBox;
    private javax.swing.JLabel airlineWarningLabel;
    private javax.swing.JPanel airlinesiInfoPanel;
    private javax.swing.JLabel categoryAirlineWarningLabel;
    private javax.swing.JLabel categoryDestinationWarningLabel;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JPanel categorySearchPanel;
    private javax.swing.JRadioButton classBusinessRadioButton;
    private javax.swing.ButtonGroup classButtonGroup;
    private javax.swing.JRadioButton classEconomicRadioButton;
    private javax.swing.JRadioButton classFirstRadioButton;
    private javax.swing.JLabel classLabel;
    private javax.swing.JLabel classWarningLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> destinationComboBox;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JButton destinationSearchButton;
    private javax.swing.JComboBox<String> destinationSearchComboBox;
    private javax.swing.JLabel destinationWarningLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem guideMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane informationScrollPanel;
    private javax.swing.JTable informationTable;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel mainTitleLabel;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel passengerCodeLabel;
    private javax.swing.JTextField passengerCodeTextField;
    private javax.swing.JLabel passengerCodeWarningLabel;
    private javax.swing.JPanel passengerInfoPanel;
    private javax.swing.JLabel passengerNameLabel;
    private javax.swing.JTextField passengerNameTextField;
    private javax.swing.JLabel passengerNameWarningLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JButton priceSearchButton;
    private javax.swing.JLabel priceSearchLabel;
    private javax.swing.JPanel priceSearchPanel;
    private javax.swing.JTextField priceSearchTextField;
    private javax.swing.JLabel priceSearchWarningLabel;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JLabel priceWarningLabel;
    private javax.swing.ButtonGroup routeButtonGroup;
    private javax.swing.JLabel routeLabel;
    private javax.swing.JCheckBox routeOneCheckBox;
    private javax.swing.JCheckBox routeTwoCheckBox;
    private javax.swing.JLabel routeWarningLabel;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
